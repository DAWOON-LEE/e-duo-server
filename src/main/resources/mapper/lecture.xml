<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.educator.eduo.lecture.model.mapper.LectureMapper">

	<resultMap id="lectureAllResult" type="com.educator.eduo.lecture.model.dto.LectureResultDto">
		<id property="lectureId" column="lecture_id"/>
		<result property="courseId" column="course_id"/>
		<result property="lectureName" column="lecture_name"/>
		<result property="lectureDate" column="lecture_date"/>
		<result property="startTime" column="start_time"/>
		<result property="endTime" column="end_time"/>
		<result property="description" column="description"/>
		<result property="existAssignment" column="exist_assignment"/>		
		<result property="existTest" column="exist_test"/>		
		<result property="testType" column="test_type"/>		
	</resultMap>
	<resultMap type="com.educator.eduo.lecture.model.dto.LectureAttendanceRegisterDto" id="LectureAttendanceRegisterDto">
		<id property="lectureId" column="lecture_id"/>
		<result property="userId" column="user_id"/>
		<result property="existAssignment" column="exist_assignment"/>
	</resultMap>

	<insert id="insertLecture" parameterType="Lecture">
		INSERT INTO lecture (course_id, lecture_name, lecture_date, start_time, end_time, description, exist_assignment, exist_test, test_type)
		VALUES (#{courseId}, #{lectureName}, #{lectureDate}, #{startTime}, #{endTime}, #{description}, #{existAssignment}, #{existTest}, #{testType});
	</insert>

	<update id="updateLecture" parameterType="Lecture">
		UPDATE lecture
		<set>
			<if test="lectureName != null">
				lecture_name = #{lectureName},
			</if>
			<if test="lectureDate != null">
				lecture_date = #{lectureDate},
			</if>
			<if test="startTime != null">
				start_time = #{startTime},
			</if>
			<if test="endTime != null">
				end_time = #{endTime},
			</if>
			<if test="description != null">
				description = #{description},
			</if>
			<if test="existAssignment != null">
				exist_assignment = #{existAssignment},
			</if>
			<if test="existTest != null">
				exist_test = #{existTest},
			</if>
			<if test="testType != null">
				test_type = #{testType}
			</if>
		</set>
		WHERE lecture_id = #{lectureId};
	</update>
	
	<delete id="deleteLecture" parameterType="String">
		DELETE FROM lecture
		where lecture_id = #{lectureId};
	</delete>
	<select id="selectLecture" parameterType="Lecture" resultMap="LectureAttendanceRegisterDto">
		SELECT l.lecture_id as lecture_id, s.user_id as user_id, l.exist_assignment as exist_assignment
		FROM lecture l
		inner join sugang s
		on l.course_id = s.course_id
		where l.lecture_id = 
		(select lecture_id from lecture
		where course_id = #{courseId} and lecture_date = #{lectureDate});
	</select>
	<select id="selectAllLecture" parameterType="string" resultMap="lectureAllResult">
		SELECT lecture_id, course_id, lecture_name, lecture_date, start_time, end_time, description, exist_assignment, exist_test, test_type
		FROM lecture
		where course_id = #{courseId};
	</select>
	
	<select id="selectSugangLecture" parameterType="string" resultMap="lectureAllResult">
		SELECT lecture_id, exist_assignment
		FROM lecture
		where course_id = #{courseId} and lecture_date >= sysdate();
	</select>

	<insert id="insertAllLecture" parameterType="java.util.List">
		INSERT INTO lecture( course_id, lecture_name, lecture_date, start_time, end_time, description, exist_assignment, exist_test, test_type)
		VALUES
		<foreach collection="list" item="item" separator=",">
			( #{item.courseId}, #{item.lectureName}, #{item.lectureDate}, #{item.startTime}, #{item.endTime}, #{item.description},
			#{item.existAssignment}, #{item.existTest}, #{item.testType})
		</foreach>
	</insert>
	
	<update id="modifyExistAssignment" parameterType="string">
		UPDATE lecture
		SET exist_assignment = 1
		where lecture_id = {lectureId};
	</update>
</mapper>